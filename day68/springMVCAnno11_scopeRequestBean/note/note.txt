
  -- Injection Bean -- 
      빈 주입
      
      @Autowired 를 사용해서 
      Bean를 자동으로 주입받음
      
      (prototype, singleton)
      
      SpringMVC 에서
      requset, session, application 
      을 제공함
      
      
      Request Scope
      
        Bean 정의시, Request Scope로 정의하면
        요청이 발생할 때마다
        *(요청(request): browser 주소창에 주소입력하고 enter !!)
        Bean 객체가 자동으로 생성되어 주입됨
        
        이 때 Bean 객체는 주입까지만 자동으로 되고
        request 영역에 자동 저장되지는 않음
        
        (model.addAttribute() 를 사용해서 저장함)
        
        
        XML로 bean을 설정하고 
        (Annotaion 방식에서는 안 됨) <bean class="" id=""/>
        byName(id) 으로 주입받았을 때에만
        request 영역에 자동으로 주입됨
        : xml에서 bean 등록할 때
          scope를 request 로 하고
          id 값을 설정하면 
          request 영역에 자동 저장됨
        : Controller 에서는 @Autowired 대신  
          @Resource(name="requestDTO2") 를 사용함
          
        
        XML 방식        : scope="request" 로 설정함
        Annotation 방식 : @RequestScope 을 사용함
        
        
        
        -- package를 scan함 --
        (@Component 사용)
        (DataDTO03, DataDTO04 를 사용함)
        
        
         Annotation 방식
         
        @Component 사용할 때는        
        RootAppContext.java에 등록을 안 해도
        ServletAppContext.java에서 
        @ComponentScan("com.tjoeun.spring.beans")
        으로 등록하면
        Spring FrameWork가 해당 package 를 scan해서
        @Component 이 붙은 클래스의 객체를
        Spring FrameWork가 
        Spring Container에 자동으로 생성함
        
        Bean 클래스의 @Component 에서
        value에 설정한 이름과        
        (value="requestDTO4")
        TestController.java 에서 <-- @ Controller
        멤버변수의 @Resource에서
        name에 설정한 이름이 
        (name="requestDTO4") 같아야 함 
        
        
        
         XML 방식
         
        @Component 사용할 때는        
        Root-Context.xml 에 등록을 안 해도
        Servlet-Context.xml에서 
        context:component-scan의 
        base-package 에 해당 package를 설정하면
        <context:component-scan 
        base-package="com.tjoeun.spring.beans" />
        
        Spring Container가 해당 package 를 scan해서
        @Component 이 붙은 클래스의 객체를
        Spring Container가 자동으로 생성함
        
        Bean 클래스의 @Component 에서
        value에 설정한 이름과        
        (value="requestDTO4")
        TestController.java 에서 
        멤버변수의 @Resource에서
        name에 설정한 이름이 
        (name="requestDTO4") 같아야 함 
      
      
      
      